package jogo;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

import display.Display;

public class Game implements Runnable {
	
	public String title;
	private Display display;
	
	public int width,height;
	
	private boolean running = false;
	
	private Thread thread;
	
	private BufferStrategy bs;
	private Graphics g;
	
	private BufferedImage testImage;
	
	private State gameState;
	private State menuState;
	
	public Game(String title, int width, int height) {
		
		this.width = width;
		this.height = height;
		this.title = title;
		
	}
	
	private void init() {
		display = new Display(title,width,height);
		testImage = ImageLoader.loadImage("/textures/charmander.png");
		gameState = new GameState();
		menuState = new MenuState();
		State.setState(gameState);
	}
	
	int x = 0;
	
	private void tick() {
		if(State.getState() != null)
		State.getState().tick();
		//updates
	}
	
	private void render() {
		
		bs = display.getCanvas().getBufferStrategy();
		if (bs ==null) {
			display.getCanvas().createBufferStrategy(3);
			return;
		}
		g = bs.getDrawGraphics();
		//Limpar 
		g.clearRect(0, 0, width, height);
		
		// Desenhe
		
		g.drawImage(testImage,100,300,null);
		
		
		//Finalize o desenho
		
		if(State.getState() != null)
			State.getState().render(g);
		
		bs.show();
		
		g.dispose();
	}
	
	
	public void run() {
		
		init();
		
		int fps = 60; // vezes que chamamos o tick por segundo
		double timePerTick = 1000000000 / fps ; //em nanossegundos
		double delta = 0; //tempo ate chamar tick e render de novo
		long now; // inicializado no começo,tempo atual do computador
		long lastTime = System.nanoTime(); 
		long timer = 0;
		int ticks = 0;
		
		while (running) {
		
		now = System.nanoTime();
		delta += (now - lastTime) / timePerTick;
		timer += now - lastTime;
		lastTime = now;
		
		
	if(delta >= 1) {
		tick();
		render();
		ticks++;
		delta--;
		}
	
	
	if(timer >= 1000000000) {
		
		System.out.println("Ticks and frames:" + ticks);
		ticks = 0;
		timer = 0;
	}
	}
		
		stop();
	}
	
	public synchronized void start() {
		if(running)
			return;
		running = true;
		thread = new Thread(this);
		thread.start();
	}
	public synchronized void stop() {
		if(!running)
			return;
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	
}
